name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true

    # format files
    - name: Terraform Format
      id: fmt
      run: terraform fmt

    # add and commit after format
    - name: Add & Commit
      # You may pin to the exact commit or the version.
      # uses: EndBug/add-and-commit@b5dec7ea7647ed6edf307ec828d3aeb6bca69f63
      uses: EndBug/add-and-commit@v5.1.0
      with:
        # Arguments for the git add command
        add: '.'
        author_name: 'Preset Bot'
        message: 'ran terraform fmt'


    - name: Post comments to GitHub PR
      uses: mshick/add-pr-comment@v1
      with:
        allow-repeats: true
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        message: |
          const output = `#### Terraform Validation \`${{ steps.validate.outputs.stdout || steps.validate.outputs.stderr }}\`
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Validate Status
      if: steps.validate.outcome == 'failure'
      run: exit 1

#     On push to master, build or change infrastructure according to Terraform configuration files
#     Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       if: github.ref == 'refs/heads/master' && github.event_name == 'push'
#       run: terraform apply -auto-approve
